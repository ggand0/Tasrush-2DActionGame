using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using Microsoft.Xna.Framework;
using Microsoft.Xna.Framework.Graphics;
using Microsoft.Xna.Framework.Input;
using Microsoft.Xna.Framework.Content;

namespace _2DActionGame
{
    /// <summary>
    ///  主人公のライバル：似たような技を持たせる.メインは剣での攻撃
    ///  12/5:主人公と同じ攻撃パターン&移動パターン+1,2の特殊技の実装で決定.
    ///  なるべくPlayerのコードを再利用したいが...
    /// </summary>
    public class Rival : Boss
    {   
        // 調整に時間がかかるだろうから早めに実装しよう→11/30無理でした☆
        #region Numbers
        public Sword sword { get; set; }
        private Animation jumpAnimation { get; set; }   // ジャンプ用にもうひとつあってもいいかも
        public Vector2 screenVector { get; set; }

        // Attacking
        public bool isInCombo { get; set; }
        public bool isInNormalCombo { get; set; }
        public bool isAttacking1 { get; set; }
        public bool isAttacking2 { get; set; }
        public bool isAttacking3 { get; set; }
        public bool isCuttingUp { get; set; }           // 斬り上げ
        public bool isCuttingUpV2 { get; set; }
        public bool isCuttingDown { get; set; }         // 斬り下げ
        public bool isCuttingDownFromAir { get; set; }  // 空中斬り下げ
        public bool isCuttingDownFromAirV2 { get; set; }// 空中斬り下げ
        public bool isCuttingAway { get; set; }         // 吹き飛ばし
        public bool isToChargingMotion { get; set; }       //溜め攻撃前のモーション
        public bool isChargingPower { get; set; }       // まさに今溜めている
        public bool isShootingBeam { get; set; }        // 溜め攻撃
        public bool hasAttacked { get; set; }           // 攻撃終了フラグ　今のところ全て共有
        public bool isTrackingEnemy { get; set; }
        public bool isDashAttacking { get; set; }
        public bool isThrusting { get; set; }
        public bool isReversing { get; set; }

        public bool inCombo1, inCombo2, inCombo3, inCombo4, inCombo5, inCombo6, inCombo7;
        public int normalComboCount;
        public int normaFirstComboTime = 40;// 20frame≒1/3[s]
        public int normaSecondComboTime = 50;
        public bool spwonEnemy { get; set; }
        public int jumpTime { get; set; }
        private bool hasJumped { get; set; }
        public int damageTime { get; set; }

        // Moving
        public double first_jumpSpeed = -13.0;
        public double second_jumpSpeed = -10.0;          // 2段ジャンプ
        //public bool hasDashed { get; set; }
        #endregion
        #region Numbers(inputs)
        private bool triangle;  // bool[]にするべきかもな...
        private bool directionUp;   // 十字キー上
        private int inputCounter;
        #endregion
        //private bool attackPlan1; // attackNumでいいや
        //private bool attackPlan2;

        public Rival(Game1 game, Stage stage, float x, float y, int width, int height, int HP, float vx, int bulletType, int shootType)
            : base(game, stage, x, y, width, height, HP, bulletType, shootType)
        {
            sword = new Sword(game, stage, this, 200, 100, 64, 8, 0);// このswordが既になぜかplayerのものである！？すげぇバグだ
            weapons.Add(sword);
            stage.weapons.Add(sword);
            //foreach (Weapon weapon in weapons)
            //    stage.weapons.Add(weapon);

            turnsRight = true;
            animation = new Animation(48, 48);
            jumpAnimation = new Animation(48, 48);
            //animation = new Animation(width, height);
            //jumpAnimation = new Animation(width, height);
        }

        public override void Update()
        {
            if(isAlive){
                attackNum = 1;
                Attack();

                // weaponsのUpdateをここで.
                switch(attackNum){
                    case 1:
                        break;
                    case 2:
                        break;
                }

                base.Update();
            }
        }
        public override void UpdateAnimation()
        {
            animation.Update(3, 0, 48, 48, 6, 1);
        }


        #region Attacking
        /// <summary>
        /// Playerの攻撃処理のコードを再利用したいので、PlayerのKeyDown(i)に相当するフラグをそれぞれ作り、管理メソッドで適当に
        /// 押させて攻撃させる感じで.
        /// </summary>
        protected void Attack()
        {
            if(isWaiting){
                if(waitCounter > 120) {
                    isWaiting = false;
                    waitCounter = 0;
                    inputCounter = 0;
                    //attackNum++;
                    isStartingAttack = true;
                    if(attackNum >= 5) attackNum = 1;
                }
                waitCounter++;
            }
            else{
                if(attackCounter == 0){
                    //isAttacking = true;
                    isStartingAttack = true;
                    counter = 0;
                }
                switch(attackNum){
                    case 1:
                        AttackWith3Combo();
                        break;
                    case 2:  break;
                    case 3:  break;
                    case 4:  break;
                }

                // 剣撃処理
                AttackProcess();
                EndCombo();

                if(isStartingAttack) attackCounter++; // 各メソッド内で？
            }
        }

        protected void InputControl1()
        {
            // 手動でボタン押下を再現する方針でやってみよう.
            //if (0 < inputCounter && inputCounter < 5)//5→2にして1階だけtrueにしよう : isOnkeyDownの再現

            // しばらくは、剣撃のみでattackNumに割り振る
            switch (attackNum) { }
            if (inputCounter == 0 || inputCounter == 40 || inputCounter == 80)
                triangle = true;
            //if()

            /*else if (60 < inputCounter && inputCounter < 80) triangle = false;
            else if (80 < inputCounter && inputCounter < 120) triangle = true;
            else if (120 < inputCounter && inputCounter < 140) triangle = false;
            else if (140 < inputCounter && inputCounter < 180) triangle = true;*/
            else {
                triangle = false;
                //inputCounter = 0;
            }

            inputCounter++;
        }
        #region AttackPlan1
        /// <summary>
        /// Playerにあるような剣での3段攻撃
        /// </summary>
        private void AttackWith3Combo()
        {
            InputControl1();
            //if (inputCounter == 0) triangle = true;

            #region △
            if (triangle){// 1回だけじゃないとダメなのかもしれない...?umu
                if(normalComboCount == 0 ){
                    isAttacking = true; sword.isBeingUsed=true;
                    //if(isDashing)isDashAttacking = true;
                    //else{
                        isAttacking1 = true;
                        isAttacking2 = false;
                    //}//キャンセルした時用
                    time = 0;// 最初に押したときから計り始める
                    isInCombo = true;
                    normalComboCount = 1;
                    inCombo1 = true;
                }
                else if(normalComboCount == 1){// norimalComboCount=0になってなかった
                    if(time < normaFirstComboTime){// 時間制限
                        isAttacking1 = false;      // 自動終了する前に強制的に次の攻撃に移るのでfalseに調整
                        isAttacking2 = true;
                        isInCombo = true;
                        isAttacking = true; sword.isBeingUsed=true;
                        normalComboCount = 2;
                        inCombo1 = false;
                        inCombo2 = true;
                        time = 0;
                    }
                }
                // すぐに1段目を出せるようにする。地上の3段目は○とか△＋○とかにしよう　上に書く
                else if(normalComboCount == 2 && Controller.stickDirection != Direction.UP){
                    isAttacking2 = false;// 自動終了する前に強制的に次の攻撃に移るのでfalseに調整
                    isAttacking1 = true;
                    isInCombo = true;
                    isInNormalCombo = true;
                    hasAttacked = true;
                    isAttacking = true; sword.isBeingUsed=true;
                    normalComboCount = 1;
                    //sword.degreeCounter = 0;// 角度が初期化されないので必要 :12/8　改良したしそんなことはないよな...? ！！ここでもplayerのswordに干渉していた..
                    inCombo2 = false;
                    inCombo1 = true;              // launch comboとnormal comboで時間を分けてもいいかも
                    time = 0;
                }

                else if(normalComboCount == 4){
                    if(time < normaSecondComboTime){
                        isAttacking = true; sword.isBeingUsed=true;
                        isAttacking1 = true;
                        isInCombo = true;
                        normalComboCount = 5;
                        inCombo4 = false;
                        inCombo5 = true;
                        time = 0;
                    }
                }
                else if(normalComboCount == 5){
                    if(time < normaSecondComboTime){
                        isAttacking = true; sword.isBeingUsed=true;
                        isAttacking1 = false;
                        isAttacking2 = true;
                        isInCombo = true;
                        normalComboCount = 6;
                        inCombo5 = false;
                        inCombo6 = true;
                        time = 0;
                    }
                }
            }
            #region ため攻撃
            // これって、このままにしたらPlayerと同時攻撃になるのかな？
            /*if(Controller.KEY(1) && normalComboCount==1){
                if(time > 60){
                    hasAttacked = true;
                    isAttacking = true; sword.isBeingUsed=true;
                    isToChargingMotion = true;
                    time = 0;

                    normalComboCount = 2;
                }
            }
            if(Controller.IsOnKeyUp(1)){
                if(isChargingPower && time > 40){
                    hasAttacked = true;
                    isAttacking = true; sword.isBeingUsed=true;
                    isChargingPower = false;
                    isShootingBeam = true;
                    time = 0;
                    normalComboCount = 0;
                }
                else if(isChargingPower && time < 40){
                    hasAttacked = true;
                    isAttacking = false;
                    isChargingPower = false;
                    isShootingBeam = false;
                    time = 0;
                    normalComboCount = 0;
                }
            }*/
            #endregion
            #endregion
            time++; // ここでいいかな？
        }
        /// <summary>
        /// 斬り上げ.その前に1回斬ってもいいかも.
        /// </summary>
        private void SlashUp()
        {
        }
        #endregion
        #region AttackPlan2
        /// <summary>
        /// Playerと同じ.
        /// </summary>
        private void UpdateInput()
        {

        }
        #endregion

        private void EndCombo()
        {
            if ((inCombo1 && time > normaFirstComboTime && !triangle) || (inCombo2 && time > normaSecondComboTime && !isChargingPower)// 段別に時間制限を設定可
                || (inCombo3 && time > normaSecondComboTime) || (inCombo4 && time > normaSecondComboTime) /*|| (inCombo4 && isOnSomething)*///開始時に地面に乗っていると0になってしまう
                || (inCombo5 && time > 10)// 最後の技を出した後すぐ終わらせたい場合はComboTimeを短くすればおｋ
                || (inCombo6 && time > normaSecondComboTime) || (inCombo7 && time > normaSecondComboTime))
            {// 遅かったら勝手にコンボ終了
                isInCombo = false;
                if (inCombo1) inCombo1 = false;
                if (inCombo2) inCombo2 = false;
                if (inCombo3) inCombo3 = false;
                if (inCombo4) { inCombo4 = false; isTrackingEnemy = false; }
                if (inCombo5) inCombo5 = false;
                if (inCombo6) inCombo6 = false;
                if (inCombo7) inCombo7 = false;

                normalComboCount = 0;
                //isAttacking = false; // 攻撃全体を終了
                time = 0;
            }
        }
        private void AttackProcess()
        {
            if (isAttacking) {

                if(isAttacking1){// なぜかPlayerのswordだぞ...?
                    sword.SlashVertically(turnsRight, 120, 8);
                    if(sword.isEnd){// isEndはsword内のメソッド内で使い始めに初期化
                        isAttacking1 = false;
                        hasAttacked = true;                          // ダメージ判定に関わる
                        isAttacking = false;

                        // attackNumでこの辺の初期化をするかどうか決めればよい...？
                        if(attackNum==2){//1){
                            inputCounter = 0;
                            isWaiting = true;
                            time = 0;
                            attackCounter = 0;
                            waitCounter = 0;
                            normalComboCount = 0;//
                            isStartingAttack = false;// attackCounter++にしやがる
                        }
                    }
                }
                else if(isAttacking2){
                    sword.SlashHorizontally(turnsRight, 120, 8);
                    if(sword.isEnd){
                        isAttacking2 = false;
                        hasAttacked = true;
                        isAttacking = false;
                    }
                }
                else if(isAttacking3){
                    sword.SlashHardlly(turnsRight, 70, 8);
                    if(sword.isEnd){
                        isAttacking3 = false;
                        hasAttacked = true;
                        isAttacking = false;

                        if(attackNum==2 || attackNum==1){// まず確認してかr
                            inputCounter = 0;
                            isWaiting = true;
                            time = 0;
                            attackCounter = 0;
                            waitCounter = 0;
                            normalComboCount = 0;//
                            isStartingAttack = false;// attackCounter++にしやがる
                        }
                    }
                }

            }
        }
        #endregion
    }
}
